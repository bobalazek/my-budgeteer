datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

model RW_DataMigration {
  version    String   @id
  name       String
  startedAt  DateTime
  finishedAt DateTime
}

model User {
  id                  String    @id @default(uuid())
  username            String    @unique
  email               String    @unique
  hashedPassword      String
  salt                String
  name                String
  resetToken          String?
  resetTokenExpiresAt DateTime?
  roles               String[]
  projects            Project[] @relation(name: "User_Projects")
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

model Category {
  id          String     @id @default(uuid())
  name        String
  description String?
  parentId    String?
  parent      Category?  @relation(name: "Category_Parent", fields: [parentId], references: [id])
  children    Category[] @relation(name: "Category_Parent")
  projects    Project[]  @relation(name: "Category_Projects")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Project {
  id               String            @id @default(uuid())
  name             String
  description      String?
  currencySymbol   String
  costEstimated    Float?
  isPublic         Boolean           @default(false)
  isTemplate       Boolean           @default(false)
  categoryId       String?
  category         Category?         @relation(name: "Category_Projects", fields: [categoryId], references: [id])
  userId           String?
  user             User?             @relation(name: "User_Projects", fields: [userId], references: [id])
  projectVariables ProjectVariable[] @relation(name: "Project_ProjectVariables")
  projectExpenses  ProjectExpense[]  @relation(name: "Project_ProjectExpenses")
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model ProjectVariable {
  id        String   @id @default(uuid())
  name      String
  value     String
  type      String // available: "string"
  order     Int      @default(0)
  projectId String
  project   Project  @relation(name: "Project_ProjectVariables", fields: [projectId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ProjectExpenseRecurringInterval {
  NONE
  DAILY
  WEEKLY
  MONTHLY
  QUARTER_YEARLY
  HALF_YEARLY
  YEARLY
}

model ProjectExpense {
  id                 String                          @id @default(uuid())
  name               String
  description        String?
  note               String?
  recurringInterval  ProjectExpenseRecurringInterval @default(NONE)
  costRangeFrom      Float?
  costRangeTo        Float?
  costActual         Float? // How much did it actually cost at the end?
  progressPercentage Float?
  meta               Json                            @default("{}")
  conditions         Json                            @default("[]")
  links              Json                            @default("[]")
  tags               Json                            @default("[]")
  isArchived         Boolean                         @default(false)
  order              Int                             @default(0)
  projectId          String
  project            Project                         @relation(name: "Project_ProjectExpenses", fields: [projectId], references: [id])
  parentId           String?
  parent             ProjectExpense?                 @relation(name: "ProjectExpense_Parent", fields: [parentId], references: [id])
  children           ProjectExpense[]                @relation(name: "ProjectExpense_Parent")
  createdAt          DateTime                        @default(now())
  updatedAt          DateTime                        @updatedAt
}
